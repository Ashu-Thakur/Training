### Multiprocessing vs. Multithreading

#### Multiprocessing:
1. **Definition**: 
   - Multiprocessing involves multiple processes, each with its own memory space. Each process runs independently and can be on different CPUs or cores.
2. **Advantages**: 
   - Better for CPU-bound tasks (e.g., mathematical computations).
   - Each process runs in its own memory space, reducing the risk of memory conflicts.
3. **Disadvantages**: 
   - Higher memory usage since each process has its own memory.
   - Inter-process communication (IPC) can be complex and slower.
4. **Implementation**:
   - The `multiprocessing` module in Python allows you to create and manage processes.

#### Multithreading:
1. **Definition**: 
   - Multithreading involves multiple threads within the same process, sharing the same memory space.
2. **Advantages**: 
   - Better for I/O-bound tasks (e.g., reading/writing files, network operations).
   - Lower memory usage as threads share the same memory space.
3. **Disadvantages**: 
   - Global Interpreter Lock (GIL) in CPython prevents true parallel execution of threads, limiting performance gains for CPU-bound tasks.
   - Shared memory space can lead to issues such as race conditions.
4. **Implementation**:
   - The `threading` module in Python allows you to create and manage threads.

### What is a Thread?
- **Definition**: A thread is the smallest unit of execution within a process. Multiple threads can exist within the same process and share the same memory space.
- **Use Cases**: Threads are ideal for I/O-bound tasks like network requests, reading/writing to disk, and user interactions.
- **Execution**: Threads can run concurrently, but due to the GIL in CPython, they do not achieve true parallel execution for CPU-bound tasks.

### What is a Process?
- **Definition**: A process is an independent program in execution, with its own memory space, program counter, and resources. Each process can have multiple threads.
- **Use Cases**: Processes are ideal for CPU-bound tasks that need true parallel execution. Using multiple processes can utilize multiple CPU cores.
- **Execution**: Processes run independently of each other. Communication between processes (IPC) can be achieved through various methods like pipes, sockets, or shared memory.

### Summary
- **Multiprocessing**: Uses multiple processes, each with its own memory. Suitable for CPU-bound tasks. Achieves true parallelism.
- **Multithreading**: Uses multiple threads within the same process, sharing the same memory. Suitable for I/O-bound tasks. Limited by the GIL in CPython.

### Example Code Comparison

#### Multithreading Example
```python
import threading
import time

def print_square(num):
    for i in range(num):
        time.sleep(0.2)
        print(f"Square: {i * i}")

def print_cube(num):
    for i in range(num):
        time.sleep(0.2)
        print(f"Cube: {i * i * i}")

t1 = threading.Thread(target=print_square, args=(5,))
t2 = threading.Thread(target=print_cube, args=(5,))

t1.start()
t2.start()

t1.join()
t2.join()

print("Done with multithreading")
```

#### Multiprocessing Example
```python
import multiprocessing
import time

def print_square(num):
    for i in range(num):
        time.sleep(0.2)
        print(f"Square: {i * i}")

def print_cube(num):
    for i in range(num):
        time.sleep(0.2)
        print(f"Cube: {i * i * i}")

if __name__ == '__main__':
    p1 = multiprocessing.Process(target=print_square, args=(5,))
    p2 = multiprocessing.Process(target=print_cube, args=(5,))

    p1.start()
    p2.start()

    p1.join()
    p2.join()

    print("Done with multiprocessing")
```

In summary, choose multithreading for I/O-bound tasks and multiprocessing for CPU-bound tasks to make the best use of your system's resources.


#!----------------------------------------------------------------------------------------------------------

# Why Use Lock in Multiprocessing?

When multiple processes access and modify shared data simultaneously, it can lead to inconsistent or incorrect results due to race conditions. A race condition occurs when the outcome depends on the non-deterministic timing of the processes. To prevent race conditions, we use locks.

A lock is a synchronization primitive that ensures that only one process can access the shared resource at a time. When a process acquires a lock, other processes that need the same resource will be blocked until the lock is released.

How to Use Lock in Multiprocessing
Create a Lock: You create a lock object that can be shared among processes.
Acquire the Lock: Before accessing the shared resource, a process must acquire the lock.
Release the Lock: After finishing with the shared resource, the process releases the lock, allowing other processes to acquire it.
#!----------------------------------------------------------------------------------------------------------
### What is a Race Condition?

A race condition is a situation that occurs when two or more processes or threads try to access and modify shared data at the same time, and the final outcome depends on the order in which the processes or threads execute. This can lead to unpredictable and incorrect results.

### Simple Explanation

Imagine two people trying to write on the same piece of paper at the same time. If both try to write their own messages without waiting for the other, their writing will overlap, making the message unreadable. Similarly, in a race condition, when multiple processes or threads try to access and change the same data simultaneously, the results can get mixed up and lead to errors.

### Example

Let's say we have a shared counter that starts at 0, and we have two processes that want to increment this counter.

1. **Without Synchronization**:
   - Both processes read the counter (initially 0).
   - Process 1 increments it to 1.
   - Process 2 also increments it to 1 (because it also read the initial value as 0 before Process 1 incremented it).
   - The final counter value is 1 instead of 2.

2. **With Synchronization**:
   - Process 1 reads the counter (initially 0) and increments it to 1.
   - Process 2 reads the counter (now 1) and increments it to 2.
   - The final counter value is correctly 2.

### Why Does It Happen?

In computing, a race condition happens because of the timing and sequence of the operations. If processes don't wait for each other and access shared data simultaneously, they can interfere with each other’s operations, leading to unpredictable results.

### Real-World Analogy

Think of a bank account:
- Two people (Person A and Person B) try to withdraw money from the same account at the same time.
- The account has $100.
- Both Person A and Person B check the balance simultaneously and see $100.
- Both decide to withdraw $80.
- Without synchronization, both withdraw $80, leaving the account with a negative balance, which shouldn’t happen.

By using synchronization mechanisms like locks, we ensure that only one person can check and withdraw money at a time, preventing the race condition.

### Summary

A race condition is like multiple people trying to do something with the same thing at the same time without coordination, leading to conflicts and incorrect results. Synchronization mechanisms help manage access to shared resources, preventing race conditions and ensuring correct outcomes.


#-----------------Multiprocessing with pool------------------------

# ---Multiprocessing Pools----------
A multiprocessing.Pool is a convenient way to parallelize the execution of a function across multiple input values. A pool of worker processes is created, and tasks are distributed among these workers to run in parallel.


! ----when we don't want to manage all process manually and distribute the task manually then we create pool which distribute the task automatically

 ! map means => distribute the task among the cores
 ! reduce means => after process gethher all the distributed data